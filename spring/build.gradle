plugins {
	id 'java'
	id 'eclipse'
	// Spring Boot 用プラグイン
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	// Doma アノテーションプロセッサ用プラグイン
	id 'com.diffplug.eclipse.apt' version '3.43.0'
	id 'org.domaframework.doma.compile' version '3.0.1'
}

group = 'info.hitomine'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// Doma O/R Mapper
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:2.2.0'
	annotationProcessor 'org.seasar.doma:doma-processor:3.5.1'
	implementation 'org.seasar.doma:doma-slf4j:3.5.1'
	runtimeOnly 'ch.qos.logback:logback-classic:1.5.18'
	
}

tasks.named('test') {
	useJUnitPlatform()
}

// Doma ビルド用設定
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def folder = new org.gradle.plugins.ide.eclipse.model.SourceFolder(".apt_generated", "bin/main")
                classpath.entries.add(folder)
                def dir = file(folder.path)
                if (!dir.exists()) {
                    dir.mkdir()
                }
            }
        }
    }
    project {
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }
    synchronizationTasks 'cleanEclipse', 'eclipse'
}




